# This workflow needs to be run on demand
# It will search for all repositories containing the provided
# action and open pull requests if necessary.

name: Update workflow from org template

on:
  workflow_dispatch:
    inputs:
      name:
        description: "The workflow to update (with .yml)"
        required: true
        default: "node.yml"

jobs:
  repositories:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.search-repos.outputs.matrix }}

    name: Get repositories for ${{ github.event.inputs.name }}

    steps:
      - name: Check actor permission
        uses: skjnldsv/check-actor-permission@e591dbfe838300c007028e1219ca82cc26e8d7c5 # v2.1
        with:
          require: admin

      - name: Create output matrix
        id: search-repos
        # This is a small bash script to fetch the list of repos containing a file and extracting the repo names
        run: |
          PAGE=1
          REPOS=""
          LAST_CALL=-1

          until [ $LAST_CALL -eq 0 ]
          do
            response=$(curl --silent "https://api.github.com/search/code?q=org:${{ github.repository_owner }}+path:.github/workflows+filename:${{ github.event.inputs.name }}&page=$PAGE" | jq -c)
            has_message=$(echo $response | jq -r '.message?')

            # If Github returns an error, display it.
            # e.g "Bad credentials"
            if [ "$has_message" != "null" ]; then
                echo $has_message
                exit 1
            fi

            # If the curl is empty, the network is most likely down.
            if [[ ! "$response" ]]; then
                echo "Github unreachable"
                exit 1
            fi

            # Process results
            SEARCH=$(echo $response | jq -c '.items | map(.repository.name) | unique')
            echo "Results for page $PAGE"
            echo $SEARCH

            # Append 
            REPOS=$(echo "$REPOS $SEARCH" | jq -cs 'add | unique')
            # Increment results
            PAGE=$(($PAGE + 1))
            LAST_CALL=$(echo $SEARCH | jq 'length')
          done
          echo $REPOS

          # Set output matrix
          echo "matrix=$REPOS" >> $GITHUB_OUTPUT

  dispatch:
    runs-on: ubuntu-latest
    needs: repositories

    strategy:
      fail-fast: false
      matrix:
        repositories: ${{ fromJSON(needs.repositories.outputs.matrix) }}

    name: Update ${{ matrix.repositories }}

    steps:
      - name: Checkout target repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
        with:
          path: target
          repository: ${{ github.repository_owner }}/${{ matrix.repositories }}

      - name: Check ${{ github.event.inputs.name }} file existence
        id: check_file_existence
        uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b # v2
        with:
          files: target/.github/workflows/${{ github.event.inputs.name }}

      - name: Checkout source repository
        if: steps.check_file_existence.outputs.files_exists == 'true'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
        with:
          path: source

      - name: Copy workflow
        if: steps.check_file_existence.outputs.files_exists == 'true'
        run: cp ./source/workflow-templates/${{ github.event.inputs.name }} ./target/.github/workflows

      - name: Create Pull Request
        if: steps.check_file_existence.outputs.files_exists == 'true'
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04 # v4
        with:
          body: Automated update of the ${{ github.event.inputs.name }} workflow from https://github.com/${{ github.repository }}
          branch: feat/workflow-auto-update-${{ github.event.inputs.name }}
          commit-message: Updating ${{ github.event.inputs.name }} workflow from template
          committer: Nextcloud bot <bot@nextcloud.com>
          author: Nextcloud bot <bot@nextcloud.com>
          path: target
          signoff: true
          title: Updating ${{ github.event.inputs.name }} workflow from template
          labels: dependencies
          token: ${{ secrets.TEMPLATE_WORKFLOW_DISPATCH_PAT }}
